{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"O projeto, desenvolvido durante a disciplina de Ferramentas de Desenvolvimento Web, ministrada pelo professor Luiz Fernando Nunes no Centro Universit\u00e1rio de Itajub\u00e1 no per\u00edodo de 2023/2. O objetivo \u00e9 desenvolver um site de controle de gastos que ofere\u00e7a uma experi\u00eancia mais pr\u00e1tica e interativa aos usu\u00e1rios. Al\u00e9m disso, foi criado um reposit\u00f3rio destinado \u00e0 documenta\u00e7\u00e3o do projeto, visando registrar todo o processo de desenvolvimento, aprimorar a colabora\u00e7\u00e3o entre os membros da equipe e servir como fonte de informa\u00e7\u00f5es e refer\u00eancia para trabalhos futuros. Caso necess\u00e1rio, o documento do projeto pode ser baixado para consulta mais detalhada clicando aqui . Atualmente, o projeto ainda n\u00e3o se encontra como conclu\u00eddo, tanto a documenta\u00e7\u00e3o quanto o c\u00f3digo-fonte est\u00e3o sujeitos a grandes atualiza\u00e7\u00f5es e melhorias. Reconhecemos a import\u00e2ncia de uma documenta\u00e7\u00e3o robusta e acess\u00edvel, e estamos dedicando esfor\u00e7os significativos para aprimor\u00e1-la. No \u00e2mbito do c\u00f3digo, planejamos implementar atualiza\u00e7\u00f5es substanciais para aprimorar a funcionalidade e a efici\u00eancia. As melhorias propostas visam otimizar o desempenho, a seguran\u00e7a e a escalabilidade da aplica\u00e7\u00e3o, al\u00e9m de garantir que a aplica\u00e7\u00e3o esteja alinhada com as tecnologias presentes no mercado de trabalho, permitindo que esse projeto seja utilizado como um portf\u00f3lio pelos membros da equipe. Equipe Foto Nome GitHub Email Wesley Bernardes bw3sley 00020321@fepi.edu.br Lucas Geraldo LoskaFaria1757 00019790@fepi.edu.br Tabela 1 - Membros da equipe","title":"Sobre"},{"location":"#equipe","text":"Foto Nome GitHub Email Wesley Bernardes bw3sley 00020321@fepi.edu.br Lucas Geraldo LoskaFaria1757 00019790@fepi.edu.br Tabela 1 - Membros da equipe","title":"Equipe"},{"location":"modeling/modeling/","text":"Casos de uso Os casos de uso s\u00e3o uma t\u00e9cnica de descoberta de requisitos, sendo que em sua forma mais simples, um caso de uso identifica os atores envolvidos em uma intera\u00e7\u00e3o e d\u00e1 nome ao tipo de intera\u00e7\u00e3o. Essa \u00e9, ent\u00e3o, suplementada por informa\u00e7\u00f5es adicionais que descrevem a intera\u00e7\u00e3o com o sistema. A informa\u00e7\u00e3o adicional pode ser uma descri\u00e7\u00e3o textual, que foi o m\u00e9todo completar que o grupo escolheu, mas pode ser feito atrav\u00e9s de um ou mais modelos gr\u00e1ficos, como diagrama de sequ\u00eancia ou de estados da UML. O conjunto de casos de uso representa todas as poss\u00edveis intera\u00e7\u00f5es que ser\u00e3o descritas nos requisitos de sistema. Um diagrama de caso de uso possui os seguintes elementos: Atores : que podem ser pessoas ou outros sistemas, e s\u00e3o representados como figuras \u2018palito\u2019; Classe de intera\u00e7\u00e3o : representa as a\u00e7\u00f5es dos usu\u00e1rios ou do sistema, e s\u00e3o representadas por uma elipse; Relacionamentos : fazem a liga\u00e7\u00e3o entre os atores e a intera\u00e7\u00e3o; Caixa de limite do sistema : define um escopo do sistema para os casos de uso. Todos os casos de uso fora da caixa s\u00e3o considerados fora do escopo do sistema. Classes Uma classe em programa\u00e7\u00e3o \u00e9 um conceito fundamental na programa\u00e7\u00e3o orientada a objetos (POO). Ela serve como um modelo para criar objetos, representando uma estrutura que cont\u00e9m atributos (vari\u00e1veis) e m\u00e9todos (fun\u00e7\u00f5es ou opera\u00e7\u00f5es) relacionados a um determinado tipo de entidade ou conceito. Vamos explorar seus componentes principais: Atributos (Vari\u00e1veis de Inst\u00e2ncia): Os atributos s\u00e3o as vari\u00e1veis que armazenam os dados associados \u00e0 classe. Eles representam as caracter\u00edsticas ou propriedades da entidade que a classe est\u00e1 modelando. Por exemplo, uma classe Pessoa pode ter atributos como nome , idade e endere\u00e7o . M\u00e9todos (Fun\u00e7\u00f5es de Inst\u00e2ncia): Os m\u00e9todos s\u00e3o as fun\u00e7\u00f5es definidas dentro da classe que representam o comportamento ou as opera\u00e7\u00f5es que podem ser realizadas nos objetos dessa classe. Eles manipulam os atributos e executam a\u00e7\u00f5es relacionadas \u00e0 entidade que a classe representa. Por exemplo, uma classe Pessoa pode ter m\u00e9todos como andar() , falar() e calcularIdade() . Construtores: Os construtores s\u00e3o m\u00e9todos especiais usados para inicializar os objetos da classe. Eles s\u00e3o chamados quando um objeto \u00e9 criado e podem receber par\u00e2metros para configurar os atributos iniciais do objeto. Encapsulamento: O encapsulamento \u00e9 o princ\u00edpio de esconder os detalhes internos de uma classe e fornecer uma interface para interagir com ela. Isso \u00e9 alcan\u00e7ado usando modificadores de acesso (como public , private , protected ) para controlar o acesso aos atributos e m\u00e9todos. Heran\u00e7a: A heran\u00e7a \u00e9 um mecanismo que permite criar uma nova classe (subclasse) com base em uma classe existente (superclasse). A subclasse herda os atributos e m\u00e9todos da superclasse e pode adicionar novos ou modificar os existentes. Polimorfismo: O polimorfismo \u00e9 a capacidade de objetos de diferentes classes serem tratados de forma uniforme se tiverem uma rela\u00e7\u00e3o de heran\u00e7a. Isso significa que um m\u00e9todo em uma superclasse pode ser implementado de maneira diferente nas subclasses. Assim a equipe, identificou os relacionamentos e funcionalidades presentes no aplicativo e levantamos essas classes como as primordiais para o funcionamento do back-end e do banco de dados. public class Usuario { public String publicId; private int id; private String name; private String email; public Usuario (String name, String email) { this.name = name; this.email = email; this.publicId = \"9381888d-77c7-4aaa-86e4-aa9f830839db\" // eu ainda n\u00e3o sei gerar uuid por aqui this.id += 1; } public string getName() { return name; } public void setName(String name) { this.name = name; } public string getEmail() { return email; } public void setEmail(String email) { this.email = email; } } public class Transacao { private String description; private int value; private Date created_at; public Transacao(String description, int value) { this.description = description; this.value = value; this.created_at = new Date() // n\u00e3o lembro como importa } } public class TipoTransacao { private Bool income; private Bool outcome; public TipoTransacao(int value) { if (value < 0) { this.income = true; } else { this.outcome = true; } } public void setTypeTransaction(enum type) { this.type = type; } }","title":"Modelagem"},{"location":"modeling/modeling/#casos-de-uso","text":"Os casos de uso s\u00e3o uma t\u00e9cnica de descoberta de requisitos, sendo que em sua forma mais simples, um caso de uso identifica os atores envolvidos em uma intera\u00e7\u00e3o e d\u00e1 nome ao tipo de intera\u00e7\u00e3o. Essa \u00e9, ent\u00e3o, suplementada por informa\u00e7\u00f5es adicionais que descrevem a intera\u00e7\u00e3o com o sistema. A informa\u00e7\u00e3o adicional pode ser uma descri\u00e7\u00e3o textual, que foi o m\u00e9todo completar que o grupo escolheu, mas pode ser feito atrav\u00e9s de um ou mais modelos gr\u00e1ficos, como diagrama de sequ\u00eancia ou de estados da UML. O conjunto de casos de uso representa todas as poss\u00edveis intera\u00e7\u00f5es que ser\u00e3o descritas nos requisitos de sistema. Um diagrama de caso de uso possui os seguintes elementos: Atores : que podem ser pessoas ou outros sistemas, e s\u00e3o representados como figuras \u2018palito\u2019; Classe de intera\u00e7\u00e3o : representa as a\u00e7\u00f5es dos usu\u00e1rios ou do sistema, e s\u00e3o representadas por uma elipse; Relacionamentos : fazem a liga\u00e7\u00e3o entre os atores e a intera\u00e7\u00e3o; Caixa de limite do sistema : define um escopo do sistema para os casos de uso. Todos os casos de uso fora da caixa s\u00e3o considerados fora do escopo do sistema.","title":"Casos de uso"},{"location":"modeling/modeling/#classes","text":"Uma classe em programa\u00e7\u00e3o \u00e9 um conceito fundamental na programa\u00e7\u00e3o orientada a objetos (POO). Ela serve como um modelo para criar objetos, representando uma estrutura que cont\u00e9m atributos (vari\u00e1veis) e m\u00e9todos (fun\u00e7\u00f5es ou opera\u00e7\u00f5es) relacionados a um determinado tipo de entidade ou conceito. Vamos explorar seus componentes principais: Atributos (Vari\u00e1veis de Inst\u00e2ncia): Os atributos s\u00e3o as vari\u00e1veis que armazenam os dados associados \u00e0 classe. Eles representam as caracter\u00edsticas ou propriedades da entidade que a classe est\u00e1 modelando. Por exemplo, uma classe Pessoa pode ter atributos como nome , idade e endere\u00e7o . M\u00e9todos (Fun\u00e7\u00f5es de Inst\u00e2ncia): Os m\u00e9todos s\u00e3o as fun\u00e7\u00f5es definidas dentro da classe que representam o comportamento ou as opera\u00e7\u00f5es que podem ser realizadas nos objetos dessa classe. Eles manipulam os atributos e executam a\u00e7\u00f5es relacionadas \u00e0 entidade que a classe representa. Por exemplo, uma classe Pessoa pode ter m\u00e9todos como andar() , falar() e calcularIdade() . Construtores: Os construtores s\u00e3o m\u00e9todos especiais usados para inicializar os objetos da classe. Eles s\u00e3o chamados quando um objeto \u00e9 criado e podem receber par\u00e2metros para configurar os atributos iniciais do objeto. Encapsulamento: O encapsulamento \u00e9 o princ\u00edpio de esconder os detalhes internos de uma classe e fornecer uma interface para interagir com ela. Isso \u00e9 alcan\u00e7ado usando modificadores de acesso (como public , private , protected ) para controlar o acesso aos atributos e m\u00e9todos. Heran\u00e7a: A heran\u00e7a \u00e9 um mecanismo que permite criar uma nova classe (subclasse) com base em uma classe existente (superclasse). A subclasse herda os atributos e m\u00e9todos da superclasse e pode adicionar novos ou modificar os existentes. Polimorfismo: O polimorfismo \u00e9 a capacidade de objetos de diferentes classes serem tratados de forma uniforme se tiverem uma rela\u00e7\u00e3o de heran\u00e7a. Isso significa que um m\u00e9todo em uma superclasse pode ser implementado de maneira diferente nas subclasses. Assim a equipe, identificou os relacionamentos e funcionalidades presentes no aplicativo e levantamos essas classes como as primordiais para o funcionamento do back-end e do banco de dados. public class Usuario { public String publicId; private int id; private String name; private String email; public Usuario (String name, String email) { this.name = name; this.email = email; this.publicId = \"9381888d-77c7-4aaa-86e4-aa9f830839db\" // eu ainda n\u00e3o sei gerar uuid por aqui this.id += 1; } public string getName() { return name; } public void setName(String name) { this.name = name; } public string getEmail() { return email; } public void setEmail(String email) { this.email = email; } } public class Transacao { private String description; private int value; private Date created_at; public Transacao(String description, int value) { this.description = description; this.value = value; this.created_at = new Date() // n\u00e3o lembro como importa } } public class TipoTransacao { private Bool income; private Bool outcome; public TipoTransacao(int value) { if (value < 0) { this.income = true; } else { this.outcome = true; } } public void setTypeTransaction(enum type) { this.type = type; } }","title":"Classes"},{"location":"prototype/prototype/","text":"Um prot\u00f3tipo de alta fidelidade \u00e9 uma representa\u00e7\u00e3o interativa e visualmente detalhada de um produto ou interface de usu\u00e1rio, que se assemelha muito ao design finalizado. Ele visa simular a experi\u00eancia do usu\u00e1rio de forma mais precisa, oferecendo uma compreens\u00e3o mais realista de como o produto funcionar\u00e1. Diferentemente de um wireframe ou prot\u00f3tipo de baixa fidelidade, um prot\u00f3tipo de alta fidelidade \u00e9 elaborado com maior n\u00edvel de detalhamento visual e de intera\u00e7\u00e3o. Ele inclui elementos como cores, estilos gr\u00e1ficos, tipografia, imagens e conte\u00fado realista. Um prot\u00f3tipo de alta fidelidade pode ser desenvolvido utilizando ferramentas de design, como o Sketch, Adobe XD, Figma ou prototipagem de c\u00f3digo, dependendo das necessidades e habilidades do designer. Esses prot\u00f3tipos permitem que os usu\u00e1rios interajam com os elementos da interface, cliquem em bot\u00f5es, naveguem entre telas e experimentem a funcionalidade geral do produto. Caso queria acessar o link do projeto, clique aqui .","title":"Prot\u00f3tipo alta fidelidade"},{"location":"prototype/wireframe/","text":"Um wireframe \u00e9 uma representa\u00e7\u00e3o visual simplificada e esquem\u00e1tica de uma interface de usu\u00e1rio, geralmente usada no design de sites, aplicativos m\u00f3veis ou outros produtos digitais. Ele \u00e9 criado antes do est\u00e1gio de design visual detalhado e ajuda a definir a estrutura, o layout e a funcionalidade b\u00e1sica de uma interface. Um wireframe \u00e9 composto por elementos simples, como caixas, linhas e texto, que representam os principais componentes da interface, como menus, bot\u00f5es, campos de entrada e conte\u00fado. Ao contr\u00e1rio do design visual final, os wireframes geralmente n\u00e3o incluem cores, estilos gr\u00e1ficos detalhados ou imagens. Os wireframes t\u00eam como objetivo principal fornecer uma representa\u00e7\u00e3o visual clara da arquitetura da informa\u00e7\u00e3o e da disposi\u00e7\u00e3o dos elementos da interface, permitindo que os designers e stakeholders do projeto visualizem a organiza\u00e7\u00e3o e a intera\u00e7\u00e3o dos diferentes elementos. Caso queria acessar o link do projeto, clique aqui .","title":"Wireframe"},{"location":"technical-tools/technical-tools/","text":"Web Nosso site de finan\u00e7as foi desenvolvido utilizando tecnologias fundamentais da web: HTML, CSS e JavaScript puros. Essa decis\u00e3o foi impulsionada por uma vis\u00e3o de agilidade e efici\u00eancia. A escolha pelo trio b\u00e1sico da web se deve \u00e0 sua simplicidade e facilidade de uso. Enquanto o HTML nos fornece a estrutura do site, o CSS cuida da apresenta\u00e7\u00e3o e o JavaScript, da interatividade. A abordagem leve dessas tecnologias nos permite iterar rapidamente sobre o design e as funcionalidades, acelerando o desenvolvimento sem perder a qualidade. Al\u00e9m disso, essa abordagem permite que consigamos testar nosso site de forma mais eficaz com usu\u00e1rios reais. Esse ciclo r\u00e1pido de feedback nos permite refinar e adaptar continuamente o projeto, permitindo que a nossa equipe se mantenha alinhada desde o in\u00edcio. Pr\u00f3ximas fases Estaremos realizando uma migra\u00e7\u00e3o estrat\u00e9gica para tecnologias mais avan\u00e7adas: ReactJS no front-end e NodeJS no back-end. Essa decis\u00e3o foi impulsionada por uma vis\u00e3o de aprender novas tecnologias, al\u00e9m de alinhar nosso site com o mercado atual. Ao adotar ReactJS no front-end, estaremos indo al\u00e9m das capacidades do HTML, CSS e JavaScript tradicionais. O ReactJS nos capacita a criar uma interface de usu\u00e1rio altamente interativa e din\u00e2mica, garantindo uma navega\u00e7\u00e3o suave e \u00e1gil para nossos usu\u00e1rios. Al\u00e9m disso, a arquitetura robusta do ReactJS, combinada com seu gerenciamento eficaz de estado, proporcionar\u00e1 a flexibilidade necess\u00e1ria para escalabilidade \u00e0 medida que nossa aplica\u00e7\u00e3o cresce em complexidade. Para otimizar ainda mais a efici\u00eancia do desenvolvimento, estaremos utilizando o Tailwind CSS, que aprimorar\u00e1 a rapidez do processo de constru\u00e7\u00e3o e garantir\u00e1 uma implementa\u00e7\u00e3o consistente e eficaz do design. Por outro lado, a integra\u00e7\u00e3o do NodeJS no back-end oferece uma s\u00e9rie de benef\u00edcios, notadamente seu desempenho escal\u00e1vel e eficiente. Sua natureza ass\u00edncrona o torna ideal para opera\u00e7\u00f5es em tempo real e aplica\u00e7\u00f5es de alta performance. Al\u00e9m disso, o vasto ecossistema de bibliotecas e m\u00f3dulos dispon\u00edveis no NodeJS contribui para um desenvolvimento r\u00e1pido e eficaz. Para otimizar ainda mais o processo de desenvolvimento, estaremos utilizando o Prisma como nosso ORM (Object-Relational Mapping). Essa escolha aprimora significativamente o acesso e manipula\u00e7\u00e3o do banco de dados, simplificando a intera\u00e7\u00e3o com as informa\u00e7\u00f5es e agilizando o ciclo de desenvolvimento do site. Assim, nossa aplica\u00e7\u00e3o exigir\u00e1 um banco de dados para armazenar as informa\u00e7\u00f5es dos usu\u00e1rios, e optamos por implementar o SQLite como a solu\u00e7\u00e3o ideal. Documenta\u00e7\u00e3o Mkdocs Para a documenta\u00e7\u00e3o online, escolhemos a poderosa ferramenta MKDocs . Com essa solu\u00e7\u00e3o, podemos criar uma documenta\u00e7\u00e3o completa e estruturada, com f\u00e1cil acesso e navega\u00e7\u00e3o. O Mkdocs oferece a possibilidade de adicionar recursos adicionais, como pesquisa avan\u00e7ada e personaliza\u00e7\u00e3o de temas, garantindo uma experi\u00eancia agrad\u00e1vel para os usu\u00e1rios. MDX MDX, abrevia\u00e7\u00e3o de \"Markdown with JSX\", \u00e9 uma extens\u00e3o do Markdown, uma linguagem de marca\u00e7\u00e3o leve amplamente utilizada para formata\u00e7\u00e3o de texto simples. O MDX permite incorporar blocos de c\u00f3digo JSX (JavaScript XML) diretamente em um documento Markdown, tornando-o mais din\u00e2mico e interativo. O JSX \u00e9 uma extens\u00e3o de sintaxe do JavaScript frequentemente associada ao ReactJS, um popular framework de JavaScript para construir interfaces de usu\u00e1rio. Com o MDX, os desenvolvedores podem criar conte\u00fado que mistura elementos de texto com componentes interativos, funcionalidades din\u00e2micas e at\u00e9 mesmo visualiza\u00e7\u00f5es de dados em tempo real. Pr\u00f3ximas fases Essa evolu\u00e7\u00e3o tecnol\u00f3gica do site tamb\u00e9m se estende \u00e0 nossa documenta\u00e7\u00e3o. Estaremos migrando para MDX, uma extens\u00e3o do Markdown, que nos permitir\u00e1 incorporar diretamente componentes interativos baseados em ReactJS em nossos documentos. Isso revolucionar\u00e1 nossa abordagem de documenta\u00e7\u00e3o, tornando-a mais envolvente, informativa e eficaz para nossa comunidade de usu\u00e1rios.","title":"Tecnologias e ferramentas"},{"location":"technical-tools/technical-tools/#web","text":"Nosso site de finan\u00e7as foi desenvolvido utilizando tecnologias fundamentais da web: HTML, CSS e JavaScript puros. Essa decis\u00e3o foi impulsionada por uma vis\u00e3o de agilidade e efici\u00eancia. A escolha pelo trio b\u00e1sico da web se deve \u00e0 sua simplicidade e facilidade de uso. Enquanto o HTML nos fornece a estrutura do site, o CSS cuida da apresenta\u00e7\u00e3o e o JavaScript, da interatividade. A abordagem leve dessas tecnologias nos permite iterar rapidamente sobre o design e as funcionalidades, acelerando o desenvolvimento sem perder a qualidade. Al\u00e9m disso, essa abordagem permite que consigamos testar nosso site de forma mais eficaz com usu\u00e1rios reais. Esse ciclo r\u00e1pido de feedback nos permite refinar e adaptar continuamente o projeto, permitindo que a nossa equipe se mantenha alinhada desde o in\u00edcio.","title":"Web"},{"location":"technical-tools/technical-tools/#proximas-fases","text":"Estaremos realizando uma migra\u00e7\u00e3o estrat\u00e9gica para tecnologias mais avan\u00e7adas: ReactJS no front-end e NodeJS no back-end. Essa decis\u00e3o foi impulsionada por uma vis\u00e3o de aprender novas tecnologias, al\u00e9m de alinhar nosso site com o mercado atual. Ao adotar ReactJS no front-end, estaremos indo al\u00e9m das capacidades do HTML, CSS e JavaScript tradicionais. O ReactJS nos capacita a criar uma interface de usu\u00e1rio altamente interativa e din\u00e2mica, garantindo uma navega\u00e7\u00e3o suave e \u00e1gil para nossos usu\u00e1rios. Al\u00e9m disso, a arquitetura robusta do ReactJS, combinada com seu gerenciamento eficaz de estado, proporcionar\u00e1 a flexibilidade necess\u00e1ria para escalabilidade \u00e0 medida que nossa aplica\u00e7\u00e3o cresce em complexidade. Para otimizar ainda mais a efici\u00eancia do desenvolvimento, estaremos utilizando o Tailwind CSS, que aprimorar\u00e1 a rapidez do processo de constru\u00e7\u00e3o e garantir\u00e1 uma implementa\u00e7\u00e3o consistente e eficaz do design. Por outro lado, a integra\u00e7\u00e3o do NodeJS no back-end oferece uma s\u00e9rie de benef\u00edcios, notadamente seu desempenho escal\u00e1vel e eficiente. Sua natureza ass\u00edncrona o torna ideal para opera\u00e7\u00f5es em tempo real e aplica\u00e7\u00f5es de alta performance. Al\u00e9m disso, o vasto ecossistema de bibliotecas e m\u00f3dulos dispon\u00edveis no NodeJS contribui para um desenvolvimento r\u00e1pido e eficaz. Para otimizar ainda mais o processo de desenvolvimento, estaremos utilizando o Prisma como nosso ORM (Object-Relational Mapping). Essa escolha aprimora significativamente o acesso e manipula\u00e7\u00e3o do banco de dados, simplificando a intera\u00e7\u00e3o com as informa\u00e7\u00f5es e agilizando o ciclo de desenvolvimento do site. Assim, nossa aplica\u00e7\u00e3o exigir\u00e1 um banco de dados para armazenar as informa\u00e7\u00f5es dos usu\u00e1rios, e optamos por implementar o SQLite como a solu\u00e7\u00e3o ideal.","title":"Pr\u00f3ximas fases"},{"location":"technical-tools/technical-tools/#documentacao","text":"","title":"Documenta\u00e7\u00e3o"},{"location":"technical-tools/technical-tools/#mkdocs","text":"Para a documenta\u00e7\u00e3o online, escolhemos a poderosa ferramenta MKDocs . Com essa solu\u00e7\u00e3o, podemos criar uma documenta\u00e7\u00e3o completa e estruturada, com f\u00e1cil acesso e navega\u00e7\u00e3o. O Mkdocs oferece a possibilidade de adicionar recursos adicionais, como pesquisa avan\u00e7ada e personaliza\u00e7\u00e3o de temas, garantindo uma experi\u00eancia agrad\u00e1vel para os usu\u00e1rios.","title":"Mkdocs"},{"location":"technical-tools/technical-tools/#mdx","text":"MDX, abrevia\u00e7\u00e3o de \"Markdown with JSX\", \u00e9 uma extens\u00e3o do Markdown, uma linguagem de marca\u00e7\u00e3o leve amplamente utilizada para formata\u00e7\u00e3o de texto simples. O MDX permite incorporar blocos de c\u00f3digo JSX (JavaScript XML) diretamente em um documento Markdown, tornando-o mais din\u00e2mico e interativo. O JSX \u00e9 uma extens\u00e3o de sintaxe do JavaScript frequentemente associada ao ReactJS, um popular framework de JavaScript para construir interfaces de usu\u00e1rio. Com o MDX, os desenvolvedores podem criar conte\u00fado que mistura elementos de texto com componentes interativos, funcionalidades din\u00e2micas e at\u00e9 mesmo visualiza\u00e7\u00f5es de dados em tempo real.","title":"MDX"},{"location":"technical-tools/technical-tools/#proximas-fases_1","text":"Essa evolu\u00e7\u00e3o tecnol\u00f3gica do site tamb\u00e9m se estende \u00e0 nossa documenta\u00e7\u00e3o. Estaremos migrando para MDX, uma extens\u00e3o do Markdown, que nos permitir\u00e1 incorporar diretamente componentes interativos baseados em ReactJS em nossos documentos. Isso revolucionar\u00e1 nossa abordagem de documenta\u00e7\u00e3o, tornando-a mais envolvente, informativa e eficaz para nossa comunidade de usu\u00e1rios.","title":"Pr\u00f3ximas fases"}]}